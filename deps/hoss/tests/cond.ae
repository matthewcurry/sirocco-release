#include <aesop/aesop.h>

#include <hoss.hae>

#include "test_util.hae"

__blocking int
aemain(int argc, char **argv)
{
	struct hoss_ctx *hoss;
	int rc, orc;
	struct hoss_oid *oid;
	struct hoss_grp *g;
	hoss_size_t nb;
	size_t i, bufsize;
	hoss_update_t max_upid;
	void *buf;

	max_upid = 100;
	bufsize = max_upid * sizeof(size_t);
	buf = malloc(bufsize);
	assert(buf != NULL);

	rc = hoss_init(&hoss, ".");
	assert(rc == 0);

	rc = hoss_begin(&g, NULL, 0, hoss);
	assert(rc == 0);
	rc = get_empty_oid(&oid, g, hoss);
	assert(rc == 0);

	for (i = 0; i < max_upid; i++) {
		rc = hoss_write(oid, i, 1, sizeof(i), 0, 0, i+1, &i, g, &nb,
				&orc);
		assert(rc == 0 && orc == 0);
	}
	for (i = 0; i < max_upid; i++) {
		rc = hoss_write(oid, i, 1, sizeof(i), HOSS_COND_ALL, i+1, i+1,
				&i, g, &nb, &orc);
		assert(rc == 0 && orc == HOSS_ECONDFAIL);
		rc = hoss_write(oid, i, 1, sizeof(i), HOSS_COND_ALL, i+2, i+1,
				&i, g, &nb, &orc);
		assert(rc == 0 && orc == 0);
	}
	rc = hoss_write
		(
		 oid,           /* struct hoss_oid *oid */
		 0,             /* hoss_off_t start */
		 max_upid,      /* hoss_size_t nrecs */
		 0,             /* hoss_size_t reclen */
		 HOSS_COND_ALL, /* hoss_flags_t flags */
		 max_upid,      /* hoss_update_t update_condition */
		 max_upid,      /* hoss_update_t new_update */
		 NULL,          /* const void *writebuf */
		 g,             /* struct hoss_grp *grp */
		 &nb,           /* hoss_size_t *nbytes_written */
		 &orc           /* int *rc */
		 );
	assert(rc == 0 && orc == HOSS_ECONDFAIL);
	rc = hoss_write
		(
		 oid,           /* struct hoss_oid *oid */
		 0,             /* hoss_off_t start */
		 max_upid,      /* hoss_size_t nrecs */
		 0,             /* hoss_size_t reclen */
		 HOSS_COND_ALL, /* hoss_flags_t flags */
		 max_upid + 1,  /* hoss_update_t update_condition */
		 max_upid,      /* hoss_update_t new_update */
		 NULL,          /* const void *writebuf */
		 g,             /* struct hoss_grp *grp */
		 &nb,           /* hoss_size_t *nbytes_written */
		 &orc           /* int *rc */
		 );
	assert(rc == 0 && orc == 0);

	rc = hoss_read
		(
		 oid,           /* struct hoss_oid *oid */
		 0,             /* hoss_off_t start */
		 max_upid,      /* hoss_size_t nrecs */
		 HOSS_COND_ALL, /* hoss_flags_t flags */
		 max_upid,      /* hoss_update_t update_condition */
		 buf,           /* void *buf */
		 bufsize,       /* hoss_size_t bufsize */
		 NULL,          /* struct hoss_record_info *ribuf */
		 0,             /* hoss_size_t maxris */
		 g,             /* struct hoss_grp *grp */
		 &nb,           /* hoss_size_t *nbytes_read */
		 NULL,          /* hoss_size_t *nris */
		 NULL,          /* hoss_update_t *update_info */
		 &orc           /* int *rc */
		 );
	assert(rc == 0 && orc == HOSS_ECONDFAIL);

	rc = hoss_read
		(
		 oid,           /* struct hoss_oid *oid */
		 0,             /* hoss_off_t start */
		 max_upid,      /* hoss_size_t nrecs */
		 HOSS_COND_ALL, /* hoss_flags_t flags */
		 max_upid + 1,  /* hoss_update_t update_condition */
		 buf,           /* void *buf */
		 bufsize,       /* hoss_size_t bufsize */
		 NULL,          /* struct hoss_record_info *ribuf */
		 0,             /* hoss_size_t maxris */
		 g,             /* struct hoss_grp *grp */
		 &nb,           /* hoss_size_t *nbytes_read */
		 NULL,          /* hoss_size_t *nris */
		 NULL,          /* hoss_update_t *update_info */
		 &orc           /* int *rc */
		 );
	assert(rc == 0 && orc == 0 && nb == 0);
	hoss_fini(hoss);
	printf("Successful exit\n");

	return 0;
}

aesop_main_set(aemain);
