/* Test reads for probe returns from read call */

struct mmsghdr;
#include <aesop/aesop.h>

#include <assert.h>
#include <stdio.h>
#include <sys/time.h>

#include <hoss.hae>

#include "test_util.hae"

static void
create_extents(struct hoss_record_info *ri,
	       size_t nris,
	       size_t min,
	       size_t max)
{
	size_t i, gap;

	assert(max > min && nris > 1);
	/* Gap: Distance between end and beginning of intervals */
	gap = (max - min - nris) / (nris - 1);
	assert(gap > 0);
	for (i = 0; i < nris; i++) {
		/*
		beginning = i*(gap+1);
		end (noninclusive) = i*(gap+1)+1;
		*/
		ri[i].start = i*(gap+1);
		ri[i].nrecs = 1;
	}
	assert(ri[i-1].start + ri[i-1].nrecs - 1 < max);
	return;
}

static __blocking void
sweeps(struct hoss_oid *oid, struct hoss_record_info *can, size_t maxris,
       struct hoss_grp *g)
{
	struct hoss_record_info *ris;
	hoss_size_t nris, nb;
	size_t i, data;
	int rc, orc;

	ris = malloc(sizeof(ris[0]) * maxris);
	assert(ris != NULL);
	for(i = 0; i < maxris; i++) {
		/* probe for one at a time */
		orc = EINPROGRESS;
		rc = hoss_read(oid, can[i].start, can[i].nrecs, 0, 0, NULL,
			      0, ris, 1, g, &nb, &nris, NULL, &orc);
		assert(rc == 0 && orc == 0 && nb == 0 && nris == 1 &&
		       can[i].start == ris[0].start &&
		       can[i].nrecs == ris[0].nrecs);
		/* probe for the space between */
		orc = EINPROGRESS;
		rc = hoss_read(oid, can[i].start + can[i].nrecs, 1, 0, 0, NULL,
			      0, ris, 1, g, &nb, &nris, NULL, &orc);
		assert(rc == 0 && orc == 0 && nb == 0 && nris == 0);
		/* Read a datum */
		orc = EINPROGRESS;
		rc = hoss_read(oid, can[i].start, can[i].nrecs, 0, 0, &data,
			      sizeof(data), NULL, 0, g, &nb, &nris, NULL,
			      &orc);
		assert(rc == 0 && orc == 0 && nb == sizeof(data) &&
		       nris == 0 && data == i);
		/* Read a gap */
		data = 0;
		orc = EINPROGRESS;
		rc = hoss_read(oid, can[i].start + can[i].nrecs, 1, 0, 0,
			      &data, sizeof(data), NULL, 0, g, &nb, &nris,\
			      NULL, &orc);
		assert(rc == 0 && orc == 0 && nb == 0 &&
		       nris == 0 && data == 0);

	}
	free(ris);
}

__blocking int
aemain(int argc, char **argv)
{
	struct hoss_grp *g;
	struct hoss_ctx *hoss;
	struct hoss_oid *oid;
	struct hoss_record_info *ris;
	size_t maxris, i, nb;
	int rc, orc;

	maxris = 100;
	ris = malloc(sizeof(ris[0]) * maxris);
	assert(ris != NULL);
	create_extents(ris, maxris, 0, maxris*3);

	rc = hoss_init(&hoss, ".");
	assert(rc == 0);

	rc = hoss_begin(&g, NULL, 0, hoss);
	assert(rc == 0);

	rc = get_empty_oid(&oid, g, hoss);
	assert(rc == 0);

	for (i = 0; i < maxris; i++) {
		orc = EINPROGRESS;
		rc = hoss_write(oid,
			       ris[i].start,
			       ris[i].nrecs,
			       sizeof(i),
			       0,
			       0,
			       1,
			       &i,
			       g,
			       &nb,
			       &orc);
		assert(rc == 0 && orc == 0 && nb == sizeof(i));
	}

	sweeps(oid, ris, maxris, g);

	rc = hoss_end(g, 1);
	assert(rc == 0);
	hoss_fini(hoss);
	free(ris);
	free(oid);
	printf("Test finished successfully.\n");
	return 0;
}

aesop_main_set(aemain);
